//! 小作业：  
//! 100 GB 的 URL 文件，使用最多 1 GB 内存计算出现次数 Top 100 的 URL 和各自的出现次数。
//! **要求：**  
//! - 最多使用 1 GB 内存
//! - 性能越快越好
//! 
//! 思路：  
//! + 将大文件拆分为 100 个小文件，每次对小文件进行 Top 100 计算，然后再整合起来进行 Top 100 运算
//! + 以 `Crate` 的形式设计 Top K 计算模块，提高代码的可复用度
//! + 提供 `TopK` trait，方便使用各种算法实现 Top K 运算
//! + 使用 Rust 的异步机制进行文件的拆分
//!     - read_one_line().await?
//!     - write_one_line().await?
//!     - 注意数据的同步与互斥,比如读第 n 行，就只能写 0~n-1 行，读完一定的行数后阻塞等待写完，然后清空 buffer 重复读写步骤
//! + 拆分完成之后每次读一个文件数据进行 Top 100 计算，计算完毕之后释放相应的内存，然后读取下一个文件，最终在 100*100 个记录（不会超过 1 GB 内存）中再进行 Top 100 计算
//! 
//! 


extern crate top_k;

fn main() {
    
}
